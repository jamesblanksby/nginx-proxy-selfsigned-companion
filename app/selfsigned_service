#!/usr/bin/env bash

source /app/function.sh

CERT_PATH="/etc/nginx/certs"

function create_cert_ext {
    local host="${1:?}"

    cat << EOF > "$CERT_PATH/$host.ext"
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
subjectAltName = @alt_names
[alt_names]
DNS.1 = $host
EOF
}

function upsert_cert {
    local cid="${1:?}"
    local -n host_array="SELFSIGNED_${cid}_HOSTS"

    for host in "${host_array[@]}"; do
        local cert_file="$CERT_PATH/$host.crt"
        local key_file="$CERT_PATH/$host.key"
        local csr_file="$CERT_PATH/$host.csr"
        local ext_file="$CERT_PATH/$host.ext"

        local should_generate_cert='false'

        if [[ ! -f "$cert_file" || ! -f "$key_file" ]] || ! openssl x509 -checkend 0 -noout -in "$cert_file"; then
            should_generate_cert='true'
            [[ -f "$cert_file" ]] && echo "Certificate for $host has expired and will be regenerated."
        fi

        if [[ "$should_generate_cert" == 'true' ]]; then
            create_cert_ext "$host"
            
            echo "Generating self-signed certificate for $host..."
            if ! openssl req -new -sha256 -nodes -newkey rsa:2048 -subj "/CN=$host" -keyout "$key_file" -out "$csr_file"; then
                echo "Failed to generate certificate request for $host."
                continue
            fi
            
            if ! openssl x509 -req -in "$csr_file" -sha256 -days "$SELFSIGNED_EXPIRY" -CA "$CERT_PATH/ca.crt" -CAkey "$CERT_PATH/ca.key" -CAcreateserial -extfile "$ext_file" -out "$cert_file"; then
                echo "Failed to sign certificate for $host."
                continue
            fi

            rm -f "$ext_file" "$csr_file" "$CERT_PATH/ca.srl"
        fi
    done
}

function cleanup_certs {
    local existing_hosts=()
    
    for cid in "${SELFSIGNED_CONTAINERS[@]}"; do
        local -n host_array="SELFSIGNED_${cid}_HOSTS"
        for host in "${host_array[@]}"; do
            existing_hosts+=("$host")
        done
    done

    for path in "$CERT_PATH"/*.crt; do
        local cert=$(basename "$path")
        if [[ "$cert" == "ca.crt" ]]; then
            continue
        fi
        local host="${cert%.*}"
        if [[ ! " ${existing_hosts[@]} " =~ " ${host} " ]]; then
            echo "Cleaning up certificate for $host."
            rm -f "$CERT_PATH/$host.crt" "$CERT_PATH/$host.key"
        fi
    done
}

function upsert_certs {
    if [[ -f /tmp/selfsigned_service_data ]]; then
        # shellcheck disable=SC1091
        source /tmp/selfsigned_service_data
    else
        echo "Warning: /tmp/selfsigned_service_data not found, skipping data from containers."
    fi

    local should_reload_nginx='false'

    for cid in "${SELFSIGNED_CONTAINERS[@]}"; do
        upsert_cert "$cid"
    done

    cleanup_certs && should_reload_nginx='true'

    [[ "$should_reload_nginx" == 'true' ]] && reload_nginx
}

upsert_certs "$@"
